{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransaccionService {\n  constructor(_http) {\n    this._http = _http;\n    this.urlBase = \"http://localhost:3000/api/\";\n  }\n  getTransacciones() {\n    let httpOptions = {\n      headers: new HttpHeaders({}),\n      params: new HttpParams()\n    };\n    return this._http.get(this.urlBase + \"transaccion\", httpOptions);\n  }\n  getConversion(de, to, amount) {\n    // funciona s / portugues\n    let httpOption = {\n      headers: new HttpHeaders({\n        'X-RapidAPI-Key': 'e1362786bdmsh6faebb9d2c83124p1e9925jsn0e80f91257b5',\n        'X-RapidAPI-Host': 'currency-converter18.p.rapidapi.com'\n      })\n    };\n    return this._http.get(\"https://currency-converter18.p.rapidapi.com/api/v1/convert?from=\" + de + \"&to=\" + to + \"&amount=\" + amount, httpOption);\n  }\n  altaDeTransaccion(transaccion) {\n    let httpOptions = {\n      headers: new HttpHeaders({}),\n      params: new HttpParams().set('monedaOrigen', transaccion.monedaOrigen).set('cantidadOrigen', transaccion.cantidadOrigen).set('monedaDestino', transaccion.monedaDestino).set('cantidadDestino', transaccion.cantidadDestino).set('emailCliente', transaccion.emailCliente).set('tasaConversion', transaccion.tasaConversion)\n    };\n    return this._http.post(this.urlBase + \"transaccion/\", httpOptions);\n  }\n  getPorFiltro(origen, destino) {\n    let httpOptions = {\n      headers: new HttpHeaders({}),\n      params: new HttpParams().set('origen', origen).set('destino', destino)\n    };\n    return this._http.get(this.urlBase + \"transaccion/divisa\", httpOptions);\n  }\n}\nTransaccionService.ɵfac = function TransaccionService_Factory(t) {\n  return new (t || TransaccionService)(i0.ɵɵinject(i1.HttpClient));\n};\nTransaccionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TransaccionService,\n  factory: TransaccionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;;;AAQ1E,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IADzB,YAAO,GAAU,4BAA4B;EACJ;EAEzCC,gBAAgB;IACd,IAAIC,WAAW,GAAE;MACfC,OAAO,EAAG,IAAIP,WAAW,CAAE,EAE1B,CAAC;MACJQ,MAAM,EAAG,IAAIP,UAAU;KACtB;IAED,OAAO,IAAI,CAACG,KAAK,CAACK,GAAG,CAAC,IAAI,CAACC,OAAO,GAAG,aAAa,EAACJ,WAAW,CAAC;EACjE;EAEAK,aAAa,CAACC,EAAW,EAAGC,EAAW,EAAEC,MAAa;IACpD;IACA,IAAIC,UAAU,GAAG;MACfR,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,gBAAgB,EAAE,oDAAoD;QACtE,iBAAiB,EAAE;OACpB;KAEF;IAGD,OAAO,IAAI,CAACI,KAAK,CAACK,GAAG,CAAC,kEAAkE,GAACG,EAAE,GAAC,MAAM,GAACC,EAAE,GAAC,UAAU,GAACC,MAAM,EAAEC,UAAU,CAAC;EACtI;EAEAC,iBAAiB,CAACC,WAAuB;IACvC,IAAIX,WAAW,GAAE;MACfC,OAAO,EAAG,IAAIP,WAAW,CAAE,EAE1B,CAAC;MACJQ,MAAM,EAAG,IAAIP,UAAU,EAAE,CACxBiB,GAAG,CAAC,cAAc,EAAED,WAAW,CAACE,YAAY,CAAC,CAC7CD,GAAG,CAAC,gBAAgB,EAAED,WAAW,CAACG,cAAc,CAAC,CACjDF,GAAG,CAAC,eAAe,EAAED,WAAW,CAACI,aAAa,CAAC,CAC/CH,GAAG,CAAC,iBAAiB,EAAED,WAAW,CAACK,eAAe,CAAC,CACnDJ,GAAG,CAAC,cAAc,EAAED,WAAW,CAACM,YAAY,CAAC,CAC7CL,GAAG,CAAC,gBAAgB,EAAED,WAAW,CAACO,cAAc;KAChD;IAID,OAAO,IAAI,CAACpB,KAAK,CAACqB,IAAI,CAAC,IAAI,CAACf,OAAO,GAAG,cAAc,EAACJ,WAAW,CAAC;EACnE;EAGAoB,YAAY,CAACC,MAAa,EAACC,OAAc;IACvC,IAAItB,WAAW,GAAE;MACfC,OAAO,EAAG,IAAIP,WAAW,CAAE,EAE1B,CAAC;MACJQ,MAAM,EAAG,IAAIP,UAAU,EAAE,CACxBiB,GAAG,CAAC,QAAQ,EAACS,MAAM,CAAC,CACpBT,GAAG,CAAC,SAAS,EAACU,OAAO;KACrB;IAED,OAAO,IAAI,CAACxB,KAAK,CAACK,GAAG,CAAC,IAAI,CAACC,OAAO,GAAG,oBAAoB,EAACJ,WAAW,CAAC;EACxE;;AA7DWJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAA2B,SAAlB3B,kBAAkB;EAAA4B,YAFjB;AAAM","names":["HttpHeaders","HttpParams","TransaccionService","constructor","_http","getTransacciones","httpOptions","headers","params","get","urlBase","getConversion","de","to","amount","httpOption","altaDeTransaccion","transaccion","set","monedaOrigen","cantidadOrigen","monedaDestino","cantidadDestino","emailCliente","tasaConversion","post","getPorFiltro","origen","destino","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\patri\\Documents\\tp5-QuirogaPatricioAlejandro-backend\\frontend\\src\\app\\services\\transaccion.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Transaccion } from '../models/transaccion';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TransaccionService {\r\n\r\n  urlBase:string = \"http://localhost:3000/api/\"\r\n  constructor(private _http: HttpClient) { }\r\n \r\n  getTransacciones():Observable<any>{\r\n    let httpOptions ={\r\n      headers : new HttpHeaders ({\r\n\r\n      }),\r\n    params : new HttpParams()\r\n    }\r\n    \r\n    return this._http.get(this.urlBase + \"transaccion\",httpOptions);\r\n  }\r\n\r\n  getConversion(de : string , to : string ,amount:number):Observable<any>{\r\n    // funciona s / portugues\r\n    let httpOption = {\r\n      headers: new HttpHeaders({\r\n        'X-RapidAPI-Key': 'e1362786bdmsh6faebb9d2c83124p1e9925jsn0e80f91257b5',\r\n        'X-RapidAPI-Host': 'currency-converter18.p.rapidapi.com'\r\n      })\r\n  \r\n    }\r\n  \r\n  \r\n    return this._http.get(\"https://currency-converter18.p.rapidapi.com/api/v1/convert?from=\"+de+\"&to=\"+to+\"&amount=\"+amount, httpOption);\r\n  }\r\n  \r\n  altaDeTransaccion(transaccion:Transaccion):Observable<any>{\r\n    let httpOptions ={\r\n      headers : new HttpHeaders ({\r\n\r\n      }),\r\n    params : new HttpParams()\r\n    .set('monedaOrigen', transaccion.monedaOrigen)\r\n    .set('cantidadOrigen', transaccion.cantidadOrigen)\r\n    .set('monedaDestino', transaccion.monedaDestino)\r\n    .set('cantidadDestino', transaccion.cantidadDestino)\r\n    .set('emailCliente', transaccion.emailCliente)\r\n    .set('tasaConversion', transaccion.tasaConversion)\r\n    }\r\n    \r\n\r\n\r\n    return this._http.post(this.urlBase + \"transaccion/\",httpOptions)\r\n  }\r\n  \r\n\r\n  getPorFiltro(origen:string,destino:string):Observable<any>{\r\n    let httpOptions ={\r\n      headers : new HttpHeaders ({\r\n\r\n      }),\r\n    params : new HttpParams()\r\n    .set('origen',origen)\r\n    .set('destino',destino)\r\n    }\r\n    \r\n    return this._http.get(this.urlBase + \"transaccion/divisa\",httpOptions);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}